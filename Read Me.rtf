{\rtf1\ansi\ansicpg1252\cocoartf1545\cocoasubrtf100
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\sl480\slmult1\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Sol Atencio\
7/21/17\
\
In the final project, I will be converting project 3 to a Graph with Dijkstra\'92s shortest path algorithm built in. In project 3 we used linked list to be able to transmit messages and hold a communication network. Incorporating a graph will allow the network to not only move forward and backward between two networks, but also it will allow cities to speak to other cities. It will become more of a communication network. \
	I will have 7 public methods in my project, that will allow this to work like a true communication network. TransmitShortest, will transmit a message through the shortest path, and return the shortest path. This mimics real life, as if someone was attempting to get an emergency alert off from coast to coast, in the shortest amount of time. BuildNetwork, will build the network in graph formation, and assign roughly real life distances. addCity, will take the city name and distance from the starting point and appropriately add it into the graph. printNetwork, will show the start and the shortest path to end. deleteCity will take in the city wanted to delete and remove it from the graph. transmitMessage will take in two towns and transmit a message from one city to the other using the shortest path. deleteNetwork will completely destroy the graph and the network path with it. \
	Incorporating these functions will allow me to remake the assignment three in a new fashion, with new functions that can make the project more realistic.\
\
\
\
\
\
\
\
\
}